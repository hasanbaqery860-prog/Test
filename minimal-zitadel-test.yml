version: '3.8'

# Minimal Zitadel setup for testing
# Usage: docker-compose -f minimal-zitadel-test.yml up

services:
  zitadel:
    image: ghcr.io/zitadel/zitadel:v2.42.0
    # Using array syntax to be absolutely sure
    command: ['start-from-init', '--masterkeyFromEnv', '--tlsMode', 'disabled']
    environment:
      # Generate with: openssl rand -base64 32
      - ZITADEL_MASTERKEY=MjgwNzk4MTY0NjUxNTI3NDQ5MjYzOTczNg==
      - ZITADEL_DATABASE_POSTGRES_HOST=postgres
      - ZITADEL_DATABASE_POSTGRES_PORT=5432
      - ZITADEL_DATABASE_POSTGRES_DATABASE=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_USERNAME=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_PASSWORD=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE=disable
      - ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME=postgres
      - ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD=postgres
      - ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE=disable
      # Minimal first instance config
      - ZITADEL_FIRSTINSTANCE_ORG_NAME=TestOrg
      - ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME=admin@example.com
      - ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD=Password1!
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=zitadel
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  postgres-data: