name: openedx-lms-common-settings
content: |
  # Management command to configure OIDC provider
  import os
  from django.core.management.base import BaseCommand
  from django.conf import settings
  from common.djangoapps.third_party_auth.models import OAuth2ProviderConfig
  from django.contrib.sites.models import Site
  import json
  
  class Command(BaseCommand):
      help = 'Configure OIDC provider for Zitadel SSO'
      
      def handle(self, *args, **options):
          self.stdout.write('Configuring OIDC Provider...')
          
          # Get or create site
          site = Site.objects.first()
          if not site:
              self.stdout.write(self.style.ERROR('No site configured!'))
              return
          
          # Get OIDC settings
          client_id = getattr(settings, 'SOCIAL_AUTH_OIDC_KEY', '')
          client_secret = getattr(settings, 'SOCIAL_AUTH_OIDC_SECRET', '')
          oidc_endpoint = getattr(settings, 'SOCIAL_AUTH_OIDC_OIDC_ENDPOINT', '')
          
          if not all([client_id, client_secret, oidc_endpoint]):
              self.stdout.write(self.style.ERROR('Missing OIDC configuration!'))
              return
          
          # Create or update provider
          provider, created = OAuth2ProviderConfig.objects.update_or_create(
              slug='oidc',
              defaults={
                  'enabled': True,
                  'name': 'oidc',
                  'site': site,
                  'skip_registration_form': True,
                  'skip_email_verification': True,
                  'send_welcome_email': False,
                  'visible': True,
                  'enable_sso_id_verification': False,
                  'backend_name': 'social_core.backends.open_id_connect.OpenIdConnectAuth',
                  'key': client_id,
                  'secret': client_secret,
                  'other_settings': json.dumps({
                      "OIDC_ENDPOINT": oidc_endpoint.rstrip('/')
                  })
              }
          )
          
          if created:
              self.stdout.write(self.style.SUCCESS('Created OIDC provider'))
          else:
              self.stdout.write(self.style.SUCCESS('Updated OIDC provider'))
  
  # Register the command
  from django.core.management import _commands
  if 'lms' not in _commands:
      _commands['lms'] = {}
  _commands['lms']['configure_oidc'] = Command