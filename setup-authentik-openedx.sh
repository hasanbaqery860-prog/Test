#!/bin/bash

# Setup script for Authentik OAuth2 integration with Open edX (Tutor)
# This script helps automate the configuration process

set -e

echo "=================================="
echo "Authentik Open edX Integration Setup"
echo "=================================="
echo ""

# Check if tutor is installed
if ! command -v tutor &> /dev/null; then
    echo "Error: Tutor is not installed or not in PATH"
    echo "Please install Tutor first: pip install tutor"
    exit 1
fi

# Get Tutor root directory
TUTOR_ROOT=$(tutor config printroot)
PLUGIN_DIR="$TUTOR_ROOT/plugins"

echo "Tutor root directory: $TUTOR_ROOT"
echo ""

# Create plugins directory if it doesn't exist
mkdir -p "$PLUGIN_DIR"

# Prompt for Authentik credentials
echo "Please enter your Authentik OAuth2 credentials:"
read -p "Client ID (default: openedx-oauth2-client): " CLIENT_ID
CLIENT_ID=${CLIENT_ID:-openedx-oauth2-client}

read -s -p "Client Secret: " CLIENT_SECRET
echo ""

if [ -z "$CLIENT_SECRET" ]; then
    echo "Error: Client Secret is required"
    exit 1
fi

read -p "Authentik URL (default: http://localhost:9000): " AUTHENTIK_URL
AUTHENTIK_URL=${AUTHENTIK_URL:-http://localhost:9000}

# Create the plugin file
PLUGIN_FILE="$PLUGIN_DIR/authentik_oauth2.py"

echo ""
echo "Creating plugin file at: $PLUGIN_FILE"

cat > "$PLUGIN_FILE" << EOF
"""
Tutor plugin for Authentik OAuth2/OIDC integration with Open edX
Auto-generated by setup script
"""
from tutor import hooks

# OAuth2 configuration for Authentik
hooks.Filters.ENV_PATCHES.add_item(
    (
        "openedx-lms-common-settings",
        """
# ===== AUTHENTIK OAUTH2 CONFIGURATION =====
# Enable third party authentication
FEATURES["ENABLE_THIRD_PARTY_AUTH"] = True
FEATURES["ENABLE_COMBINED_LOGIN_REGISTRATION"] = True

# Add OAuth2 backend
THIRD_PARTY_AUTH_BACKENDS = ["social_core.backends.open_id_connect.OpenIdConnectAuth"]

# OAuth2 Provider Configuration
SOCIAL_AUTH_AUTHENTIK_OAUTH2_KEY = "${CLIENT_ID}"
SOCIAL_AUTH_AUTHENTIK_OAUTH2_SECRET = "${CLIENT_SECRET}"
SOCIAL_AUTH_AUTHENTIK_OAUTH2_ENDPOINT = "${AUTHENTIK_URL}/application/o/openedx/"

# OpenID Connect settings
SOCIAL_AUTH_OIDC_OIDC_ENDPOINT = SOCIAL_AUTH_AUTHENTIK_OAUTH2_ENDPOINT
SOCIAL_AUTH_OIDC_KEY = SOCIAL_AUTH_AUTHENTIK_OAUTH2_KEY
SOCIAL_AUTH_OIDC_SECRET = SOCIAL_AUTH_AUTHENTIK_OAUTH2_SECRET

# Add to authentication backends
AUTHENTICATION_BACKENDS = (
    "social_core.backends.open_id_connect.OpenIdConnectAuth",
) + AUTHENTICATION_BACKENDS

# Social auth pipeline
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# Additional settings
SOCIAL_AUTH_OIDC_USERNAME_KEY = "preferred_username"
SOCIAL_AUTH_OIDC_EMAIL_KEY = "email"
SOCIAL_AUTH_OIDC_FULLNAME_KEY = "name"
SOCIAL_AUTH_ASSOCIATE_BY_EMAIL = True

# CORS settings
CORS_ORIGIN_WHITELIST = list(CORS_ORIGIN_WHITELIST) + [
    "${AUTHENTIK_URL}",
]

# Custom name for login button
SOCIAL_AUTH_OIDC_CUSTOM_NAME = "Authentik"
"""
    )
)

# Add the same configuration for CMS
hooks.Filters.ENV_PATCHES.add_item(
    (
        "openedx-cms-common-settings",
        """
# ===== AUTHENTIK OAUTH2 CONFIGURATION FOR CMS =====
FEATURES["ENABLE_THIRD_PARTY_AUTH"] = True

THIRD_PARTY_AUTH_BACKENDS = ["social_core.backends.open_id_connect.OpenIdConnectAuth"]

# Use the same OAuth2 settings as LMS
SOCIAL_AUTH_AUTHENTIK_OAUTH2_KEY = "${CLIENT_ID}"
SOCIAL_AUTH_AUTHENTIK_OAUTH2_SECRET = "${CLIENT_SECRET}"
SOCIAL_AUTH_AUTHENTIK_OAUTH2_ENDPOINT = "${AUTHENTIK_URL}/application/o/openedx/"

SOCIAL_AUTH_OIDC_OIDC_ENDPOINT = SOCIAL_AUTH_AUTHENTIK_OAUTH2_ENDPOINT
SOCIAL_AUTH_OIDC_KEY = SOCIAL_AUTH_AUTHENTIK_OAUTH2_KEY
SOCIAL_AUTH_OIDC_SECRET = SOCIAL_AUTH_AUTHENTIK_OAUTH2_SECRET

AUTHENTICATION_BACKENDS = (
    "social_core.backends.open_id_connect.OpenIdConnectAuth",
) + AUTHENTICATION_BACKENDS

# CORS settings for CMS
CORS_ORIGIN_WHITELIST = list(CORS_ORIGIN_WHITELIST) + [
    "${AUTHENTIK_URL}",
]
"""
    )
)
EOF

echo "Plugin file created successfully!"
echo ""

# Enable the plugin
echo "Enabling the authentik_oauth2 plugin..."
tutor plugins enable authentik_oauth2

# Save configuration
echo "Saving Tutor configuration..."
tutor config save

echo ""
echo "=================================="
echo "Configuration completed!"
echo "=================================="
echo ""
echo "Next steps:"
echo "1. Rebuild Open edX images (this may take a while):"
echo "   tutor images build openedx"
echo ""
echo "2. Restart your Open edX services:"
echo "   tutor local stop"
echo "   tutor local start -d"
echo ""
echo "3. Create a superuser (if you haven't already):"
echo "   tutor local run lms ./manage.py lms createsuperuser"
echo ""
echo "4. Test the integration by visiting:"
echo "   http://local.openedx.io:8000/login"
echo ""
echo "You should see a 'Sign in with Authentik' option."
echo ""
echo "Important URLs configured:"
echo "- Authentik endpoint: ${AUTHENTIK_URL}/application/o/openedx/"
echo "- LMS redirect URI: http://local.openedx.io:8000/auth/complete/oidc/"
echo "- Studio redirect URI: http://studio.local.openedx.io:8001/auth/complete/oidc/"
echo ""
echo "Make sure these redirect URIs are configured in your Authentik provider!"